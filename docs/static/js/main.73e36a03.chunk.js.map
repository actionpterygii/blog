{"version":3,"sources":["logo.svg","config.js","scripts/actions.js","scripts/useAPI.js","components/Header.js","components/Top.js","components/Post.js","components/Footer.js","App.js","serviceWorker.js","scripts/reducer.js","index.js"],"names":["module","exports","PATH","KEY","successFetchBlogPostAction","blogPost","type","useAPI","dispatch","useDispatch","blogInfo","useSelector","state","fetchBlogInfo","axios","get","headers","then","res","payload","data","fetchBlogPost","id","a","catch","Header","title","description","Top","Post","key","useParams","useEffect","fetching","success","content","category","name","tags","map","tag","i","href","failed","Footer","copyright","App","src","logo","className","alt","exact","path","component","Boolean","window","location","hostname","match","initialState","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.73e36a03.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1813edc8.svg\";","// ブログサービスのAPIのURL\nexport const PATH = 'https://actionpterygii.microcms.io/api/v1/';\n// ブログサービスのAPIのキー\nexport const KEY = '3eb7bf23-beb0-472c-82af-0b67cdb6ca22';","export const fetchBlogInfoAction = (payload) => ({\n  type: \"FETCH_BLOG_INFO\",\n  payload\n});\n\nexport const fetchBlogPostAction = () => ({\n  type: \"FETCH_BLOG_POST\"\n});\nexport const successFetchBlogPostAction = (blogPost) => ({\n  type: \"SUCCESS_FETCH_BLOG_POST\",\n  blogPost\n});\nexport const failedFetchBlogPostAction = () => ({\n  type: \"FAILED_FETCH_BLOG_POST\"\n});\n","import {useSelector, useDispatch} from \"react-redux\";\nimport axios from \"axios\";\n\nimport {PATH, KEY} from \"../config\";\nimport {\n  fetchBlogInfoAction,\n  fetchBlogPostAction,\n  successFetchBlogPostAction,\n  failedFetchBlogPostAction\n} from \"./actions\";\n\nexport default function useAPI() {\n  const dispatch = useDispatch();\n\n  const blogInfo = useSelector((state) => state.blogInfo);\n  const blogPost = useSelector((state) => state.blogPost);\n\n  const fetchBlogInfo = () => {\n    axios\n      .get(PATH + \"information\", {\n        headers: {\"X-API-KEY\": KEY}\n      })\n      .then((res) => {\n        dispatch(fetchBlogInfoAction(res.data));\n      });\n  };\n\n  const fetchBlogPost = async (id) => {\n    dispatch(fetchBlogPostAction());\n    await axios\n      .get(PATH + \"post/post\" + id, {\n        headers: {\"X-API-KEY\": KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogPostAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogPostAction());\n      });\n  };\n\n  return {\n    blogInfo,\n    fetchBlogInfo,\n    blogPost,\n    fetchBlogPost\n  };\n}\n","import React from \"react\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Header() {\n  const {blogInfo} = useAPI();\n\n  return (\n    <header>\n      <h1>{blogInfo.title}</h1>\n      <p>{blogInfo.description}</p>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Top() {\n  const {blogInfo} = useAPI();\n\n  return <div>とっぷ</div>;\n}\n\nexport default Top;\n","import React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Post() {\n  const {blogPost, fetchBlogPost} = useAPI();\n  const {key} = useParams();\n\n  useEffect(() => {\n    fetchBlogPost(key);\n  }, []);\n\n  if (blogPost.fetching) {\n    return <div>よみこみちゅう</div>;\n  } else {\n    if (blogPost.success) {\n      return (\n        <div>\n          <h2>{blogPost.title}</h2>\n          <div>{blogPost.content}</div>\n          <div>{blogPost.category.name}</div>\n          <ul>\n            {blogPost.tags.map((tag, i) => (\n              <li key={i}>\n                <a href={`/#/tags/${tag.id}`}>{tag.name}</a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    } else if (blogPost.failed) {\n      return <div>ないです</div>;\n    } else {\n      return <div>a</div>;\n    }\n  }\n}\n\nexport default Post;\n","import React from \"react\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Footer() {\n  const {blogInfo} = useAPI();\n\n  return (\n    <footer>\n      <small>&copy; 2020 {blogInfo.copyright}</small>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, {useEffect} from \"react\";\nimport {BrowserRouter, Route, Switch, HashRouter} from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport useAPI from \"./scripts/useAPI\";\nimport Header from \"./components/Header\";\nimport Top from \"./components/Top\";\nimport Post from \"./components/Post\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const {fetchBlogInfo} = useAPI();\n\n  useEffect(() => {\n    fetchBlogInfo();\n  }, []);\n\n  return (\n    <HashRouter>\n      <Header />\n      <main>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Switch>\n          <Route exact path=\"/\" component={Top} />\n          <Route exact path=\"/post/:key\" component={Post} />\n        </Switch>\n      </main>\n      <Footer />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {blogInfo: {}, blogPost: {}};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"FETCH_BLOG_INFO\": {\n      return {\n        ...state,\n        blogInfo: action.payload\n      };\n    }\n    case \"FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPost: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPost: {\n          ...action.blogPost,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPost: {failed: true}\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\n\nimport reducer from \"./scripts/reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}