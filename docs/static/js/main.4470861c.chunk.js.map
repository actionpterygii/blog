{"version":3,"sources":["logo.svg","config.js","scripts/actions.js","scripts/useAPI.js","components/Header.js","components/Menu.js","components/PostList.js","components/Post.js","components/CategoryList.js","components/Category.js","components/TagList.js","components/Tag.js","components/Search.js","scripts/useCommonState.js","components/Footer.js","App.js","serviceWorker.js","scripts/reducer.js","index.js"],"names":["module","exports","API_PATH","API_KEY","PATH","successFetchBlogInfoAction","blogInfo","type","fetchBlogPostListAction","status","successFetchBlogPostListAction","blogPostList","successFetchBlogPostAction","blogPost","successFetchBlogCategoryListAction","blogCategoryList","successFetchBlogCategoryAction","blogCategory","successFetchBlogTagListAction","blogTagList","successFetchBlogTagAction","blogTag","useAPI","dispatch","useDispatch","useSelector","state","fetchBlogInfo","a","axios","get","headers","then","res","data","catch","fetchBlogPostList","target","value","limit","offsetQuery","contents","length","searchQuery","fetchBlogPost","id","fetchBlogCategoryList","fetchBlogCategory","fetchBlogTagList","fetchBlogTag","postIdToPath","replace","Header","className","href","Menu","PostList","useEffect","fetching","success","map","i","key","title","content","category","name","tags","tag","moreFetching","totalCount","onClick","failed","Post","useParams","CategoryList","desc","Category","TagList","Tag","searchText","changeSearchText","text","changeSearchTextAction","useCommonState","onChange","e","currentTarget","Footer","App","exact","path","component","Search","Boolean","window","location","hostname","match","initialState","store","createStore","action","err","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,sLCC9BC,EAAW,6CAEXC,EAAU,uCAEVC,EAAO,UCFPC,EAA6B,SAACC,GAAD,MAAe,CACvDC,KAAM,0BACND,aAMWE,EAA0B,SAACC,GAAD,MAAa,CAClDF,KAAM,uBACNE,WAEWC,EAAiC,SAACC,EAAcF,GAAf,MAA2B,CACvEF,KAAM,+BACNI,eACAF,WASWG,EAA6B,SAACC,GAAD,MAAe,CACvDN,KAAM,0BACNM,aASWC,EAAqC,SAACC,GAAD,MAAuB,CACvER,KAAM,mCACNQ,qBAQWC,EAAiC,SAACC,GAAD,MAAmB,CAC/DV,KAAM,8BACNU,iBASWC,EAAgC,SAACC,GAAD,MAAkB,CAC7DZ,KAAM,8BACNY,gBAQWC,EAA4B,SAACC,GAAD,MAAc,CACrDd,KAAM,yBACNc,YC3Ca,SAASC,IACtB,IAAMC,EAAWC,cAEXlB,EAAWmB,aAAY,SAACC,GAAD,OAAWA,EAAMpB,YACxCK,EAAec,aAAY,SAACC,GAAD,OAAWA,EAAMf,gBAC5CE,EAAWY,aAAY,SAACC,GAAD,OAAWA,EAAMb,YACxCE,EAAmBU,aAAY,SAACC,GAAD,OAAWA,EAAMX,oBAChDE,EAAeQ,aAAY,SAACC,GAAD,OAAWA,EAAMT,gBAC5CE,EAAcM,aAAY,SAACC,GAAD,OAAWA,EAAMP,eAC3CE,EAAUI,aAAY,SAACC,GAAD,OAAWA,EAAML,WA+H7C,MAAO,CACLf,WACAqB,cA/HiB,uCAAG,sBAAAC,EAAA,6DACpBL,EDxCsC,CACxChB,KAAM,oBCsCgB,SAEdsB,IACHC,IAAI5B,EAAW,cAAe,CAC7B6B,QAAS,CAAC,YAAa5B,KAExB6B,MAAK,SAACC,GACLV,EAASlB,EAA2B4B,EAAIC,UAEzCC,OAAM,WACLZ,ED1CwC,CAC9ChB,KAAM,8BC+BgB,2CAAH,qDAgIjBI,eACAyB,kBAnHqB,uCAAG,kDAAAR,EAAA,6DACxBnB,EADwB,+BACf,MACT4B,EAFwB,+BAEf,KACTC,EAHwB,+BAGhB,KACRC,EAJwB,+BAIhB,KAERhB,EAASf,EAAwBC,IAC3B+B,EACW,aAAX/B,EACI,WAAN,OAAkBE,EAAa8B,SAASC,QAEjC,GAGLC,EACW,SAAXN,EACI,MAAN,OAAaC,GACO,aAAXD,EACH,YAAN,OAAmBA,EAAnB,mBAAoCC,GAChB,SAAXD,EACH,YAAN,OAAmBA,EAAnB,qBAAsCC,GAE/B,GAtBa,SAyBlBT,IACHC,IADG,UACI5B,EADJ,sBAC0BqC,GAD1B,OACkCC,GADlC,OACgDG,GAAe,CACjEZ,QAAS,CAAC,YAAa5B,KAExB6B,MAAK,SAACC,GACLV,EAASb,EAA+BuB,EAAIC,KAAMzB,OAEnD0B,OAAM,WACLZ,EDlE4C,CAClDhB,KAAM,mCCgCoB,2CAAH,qDAoHrBM,WACA+B,cAhFiB,uCAAG,WAAOC,GAAP,SAAAjB,EAAA,6DACpBL,EDnEsC,CACxChB,KAAM,oBCiEgB,SAEdsB,IACHC,IADG,UACI5B,EADJ,oBACwB2C,GAAM,CAChCd,QAAS,CAAC,YAAa5B,KAExB6B,MAAK,SAACC,GACLV,EAASX,EAA2BqB,EAAIC,UAEzCC,OAAM,WACLZ,EDrEwC,CAC9ChB,KAAM,8BC0DgB,2CAAH,sDAiFjBQ,mBACA+B,sBApEyB,uCAAG,sBAAAlB,EAAA,6DAC5BL,EDtE8C,CAChDhB,KAAM,6BCoEwB,SAEtBsB,IACHC,IADG,UACI5B,EADJ,qBACiC,CACnC6B,QAAS,CAAC,YAAa5B,KAExB6B,MAAK,SAACC,GACLV,EAAST,EAAmCmB,EAAIC,UAEjDC,OAAM,WACLZ,EDxEgD,CACtDhB,KAAM,uCC6DwB,2CAAH,qDAqEzBU,eACA8B,kBAxDqB,uCAAG,WAAOF,GAAP,SAAAjB,EAAA,6DACxBL,ED1E0C,CAC5ChB,KAAM,wBCwEoB,SAElBsB,IACHC,IADG,UACI5B,EADJ,oBACwB2C,GAAM,CAChCd,QAAS,CAAC,YAAa5B,KAExB6B,MAAK,SAACC,GACLV,EAASP,EAA+BiB,EAAIC,UAE7CC,OAAM,WACLZ,ED5E4C,CAClDhB,KAAM,kCCiEoB,2CAAH,sDAyDrBY,cACA6B,iBA5CoB,uCAAG,sBAAApB,EAAA,6DACvBL,ED7EyC,CAC3ChB,KAAM,wBC2EmB,SAEjBsB,IACHC,IADG,UACI5B,EADJ,gBAC4B,CAC9B6B,QAAS,CAAC,YAAa5B,KAExB6B,MAAK,SAACC,GACLV,EAASL,EAA8Be,EAAIC,UAE5CC,OAAM,WACLZ,ED/E2C,CACjDhB,KAAM,kCCoEmB,2CAAH,qDA6CpBc,UACA4B,aAhCgB,uCAAG,WAAOJ,GAAP,SAAAjB,EAAA,6DACnBL,EDjFqC,CACvChB,KAAM,mBC+Ee,SAEbsB,IACHC,IADG,UACI5B,EADJ,eACmB2C,GAAM,CAC3Bd,QAAS,CAAC,YAAa5B,KAExB6B,MAAK,SAACC,GACLV,EAASH,EAA0Ba,EAAIC,UAExCC,OAAM,WACLZ,EDnFuC,CAC7ChB,KAAM,6BCwEe,2CAAH,sDAiChB2C,aAnBmB,SAACL,GACpB,OAAOA,EAAGM,QAAQ,QAAS,MChJhBC,MAbf,WACE,OACE,gCACE,yBAAKC,UAAU,SACb,4BACE,uBAAGC,KAAI,UAAKlD,EAAL,SHFI,+CGIb,2BHFmB,qCIcZmD,MAnBf,WACE,OACE,6BACE,6BACE,uBAAGD,KAAI,UAAKlD,EAAL,SAAP,6BAEF,6BACE,uBAAGkD,KAAI,UAAKlD,EAAL,WAAP,6BAEF,6BACE,uBAAGkD,KAAI,UAAKlD,EAAL,aAAP,yCAEF,6BACE,uBAAGkD,KAAI,UAAKlD,EAAL,QAAP,+BCgDOoD,MA5Df,WAAqB,IAAD,EACsClC,IAAjDX,EADW,EACXA,aAAcyB,EADH,EACGA,kBAAmBc,EADtB,EACsBA,aAOxC,OALAO,qBAAU,WACRrB,EAAkB,SAEjB,IAGD,6BACGzB,EAAa+C,SACZ,yBAAKL,UAAU,WAAf,8CACE1C,EAAagD,QACf,6BACE,wDACA,wBAAIN,UAAU,YACX1C,EAAa8B,SAASmB,KAAI,SAAC/C,EAAUgD,GAAX,OACzB,wBAAIC,IAAKD,GACP,uBAAGP,KAAI,UAAKlD,EAAL,gBAAiB8C,EAAarC,EAASgC,MAC5C,wBAAIQ,UAAU,aAAaxC,EAASkD,OACpC,yBAAKV,UAAU,eAAexC,EAASmD,SACvC,yBAAKX,UAAU,gBAAf,uCACSxC,EAASoD,SAASC,MAE3B,4BACGrD,EAASsD,KAAKP,KAAI,SAACQ,EAAKP,GAAN,OACjB,wBAAIR,UAAU,UAAUS,IAAKD,GAC1BO,EAAIF,gBAQnB,6BACGvD,EAAa0D,aACZ,yBAAKhB,UAAU,WAAf,8CACE1C,EAAa2D,WAAa3D,EAAa8B,SAASC,OAClD,4BACEW,UAAU,OACV9C,KAAK,SACLgE,QAAS,kBAAMnC,EAAkB,cAHnC,wCAQA,KAIJzB,EAAa6D,OACf,yBAAKnB,UAAU,WAAf,4BAEA,yBAAKA,UAAU,WAAf,oCCVOoB,MA3Cf,WAAiB,IAAD,EACoBnD,IAA3BT,EADO,EACPA,SAAU+B,EADH,EACGA,cACVkB,EAAOY,cAAPZ,IAOP,OALAL,qBAAU,WACRb,EAAckB,KAEb,IAGD,6BACGjD,EAAS6C,SACR,yBAAKL,UAAU,WAAf,8CACExC,EAAS8C,QACX,yBAAKN,UAAU,QACb,wBAAIA,UAAU,aAAaxC,EAASkD,OACpC,yBAAKV,UAAU,eAAexC,EAASmD,SACvC,yBAAKX,UAAU,gBACb,6DACA,uBAAGC,KAAI,UAAKlD,EAAL,oBAAqBS,EAASoD,SAASpB,KAC3ChC,EAASoD,SAASC,OAGvB,yBAAKb,UAAU,eACb,2CACA,4BACGxC,EAASsD,KAAKP,KAAI,SAACQ,EAAKP,GAAN,OACjB,wBAAIR,UAAU,UAAUS,IAAKD,GAC3B,uBAAGP,KAAI,UAAKlD,EAAL,eAAgBgE,EAAIvB,KAAOuB,EAAIF,aAM9CrD,EAAS2D,OACX,yBAAKnB,UAAU,WAAf,4BAEA,yBAAKA,UAAU,WAAf,oCCHOsB,MAnCf,WAAyB,IAAD,EAC4BrD,IAA3CP,EADe,EACfA,iBAAkB+B,EADH,EACGA,sBAOzB,OALAW,qBAAU,WACRX,MAEC,IAGD,6BACG/B,EAAiB2C,SAChB,yBAAKL,UAAU,WAAf,8CACEtC,EAAiB4C,QACnB,6BACE,0EACA,wBAAIN,UAAU,gBACXtC,EAAiB0B,SAASmB,KAAI,SAACK,EAAUJ,GAAX,OAC7B,wBAAIC,IAAKD,GACP,uBAAGP,KAAI,UAAKlD,EAAL,oBAAqB6D,EAASpB,KACnC,wBAAIQ,UAAU,gBAAgBY,EAASC,MACvC,yBAAKb,UAAU,gBAAgBY,EAASW,aAMhD7D,EAAiByD,OACnB,yBAAKnB,UAAU,WAAf,4BAEA,yBAAKA,UAAU,WAAf,oCCuDOwB,MAnFf,WAAqB,IAAD,EAOdvD,IALFL,EAFgB,EAEhBA,aACA8B,EAHgB,EAGhBA,kBACApC,EAJgB,EAIhBA,aACAyB,EALgB,EAKhBA,kBACAc,EANgB,EAMhBA,aAEKY,EAAOY,cAAPZ,IAQP,OANAL,qBAAU,WACRV,EAAkBe,GAClB1B,EAAkB,MAAO,WAAY0B,KAEpC,IAGD,6BACG7C,EAAayC,SACZ,yBAAKL,UAAU,WAAf,8CACEpC,EAAa0C,QACf,6BACE,qCAAM1C,EAAaiD,KAAnB,wCACA,yBAAKb,UAAU,QAAQpC,EAAa2D,MACpC,6BACGjE,EAAa+C,SACZ,yBAAKL,UAAU,WAAf,8CACE1C,EAAagD,QACf,6BACE,8DACA,wBAAIN,UAAU,YACX1C,EAAa8B,SAASmB,KAAI,SAAC/C,EAAUgD,GAAX,OACzB,wBAAIC,IAAKD,GACP,uBAAGP,KAAI,UAAKlD,EAAL,gBAAiB8C,EAAarC,EAASgC,MAC5C,wBAAIQ,UAAU,aAAaxC,EAASkD,OACpC,yBAAKV,UAAU,eAAexC,EAASmD,SACvC,yBAAKX,UAAU,gBAAf,uCACSxC,EAASoD,SAASC,MAE3B,4BACGrD,EAASsD,KAAKP,KAAI,SAACQ,EAAKP,GAAN,OACjB,wBAAIR,UAAU,UAAUS,IAAKD,GAC1BO,EAAIF,gBAQnB,6BACGvD,EAAa0D,aACZ,yBAAKhB,UAAU,WAAf,8CACE1C,EAAa2D,WAAa3D,EAAa8B,SAASC,OAClD,4BACEnC,KAAK,SACLgE,QAAS,kBACPnC,EAAkB,WAAY,WAAY0B,KAH9C,wCASA,KAIJnD,EAAa6D,OACf,yBAAKnB,UAAU,WAAf,4BAEA,yBAAKA,UAAU,WAAf,oCAIJpC,EAAauD,OACf,yBAAKnB,UAAU,WAAf,4BAEA,yBAAKA,UAAU,WAAf,oCC3COyB,MAnCf,WAAoB,IAAD,EACuBxD,IAAjCH,EADU,EACVA,YAAa6B,EADH,EACGA,iBAOpB,OALAS,qBAAU,WACRT,MAEC,IAGD,6BACG7B,EAAYuC,SACX,yBAAKL,UAAU,WAAf,8CACElC,EAAYwC,QACd,6BACE,wDACA,wBAAIN,UAAU,WACXlC,EAAYsB,SAASmB,KAAI,SAACK,EAAUJ,GAAX,OACxB,wBAAIC,IAAKD,GACP,uBAAGP,KAAI,UAAKlD,EAAL,eAAgB6D,EAASpB,KAC9B,wBAAIQ,UAAU,WAAWY,EAASC,MAClC,yBAAKb,UAAU,WAAWY,EAASW,aAM3CzD,EAAYqD,OACd,yBAAKnB,UAAU,WAAf,4BAEA,yBAAKA,UAAU,WAAf,oCCqDO0B,MAjFf,WAAgB,IAAD,EAOTzD,IALFD,EAFW,EAEXA,QACA4B,EAHW,EAGXA,aACAtC,EAJW,EAIXA,aACAyB,EALW,EAKXA,kBACAc,EANW,EAMXA,aAEKY,EAAOY,cAAPZ,IAQP,OANAL,qBAAU,WACRR,EAAaa,GACb1B,EAAkB,MAAO,OAAQ0B,KAEhC,IAGD,6BACGzC,EAAQqC,SACP,yBAAKL,UAAU,WAAf,8CACEhC,EAAQsC,QACV,6BACE,qCAAMtC,EAAQ6C,KAAd,sBACA,yBAAKb,UAAU,QAAQhC,EAAQuD,MAC/B,6BACGjE,EAAa+C,SACZ,yBAAKL,UAAU,WAAf,8CACE1C,EAAagD,QACf,6BACE,8DACA,wBAAIN,UAAU,YACX1C,EAAa8B,SAASmB,KAAI,SAAC/C,EAAUgD,GAAX,OACzB,wBAAIC,IAAKD,GACP,uBAAGP,KAAI,UAAKlD,EAAL,gBAAiB8C,EAAarC,EAASgC,MAC5C,wBAAIQ,UAAU,aAAaxC,EAASkD,OACpC,yBAAKV,UAAU,eAAexC,EAASmD,SACvC,yBAAKX,UAAU,gBAAf,uCACSxC,EAASoD,SAASC,MAE3B,4BACGrD,EAASsD,KAAKP,KAAI,SAACQ,EAAKP,GAAN,OACjB,wBAAIR,UAAU,UAAUS,IAAKD,GAC1BO,EAAIF,gBAQnB,6BACGvD,EAAa0D,aACZ,yBAAKhB,UAAU,WAAf,8CACE1C,EAAa2D,WAAa3D,EAAa8B,SAASC,OAClD,4BACEnC,KAAK,SACLgE,QAAS,kBAAMnC,EAAkB,WAAY,OAAQ0B,KAFvD,wCAOA,KAIJnD,EAAa6D,OACf,yBAAKnB,UAAU,WAAf,4BAEA,yBAAKA,UAAU,WAAf,oCAIJhC,EAAQmD,OACV,yBAAKnB,UAAU,WAAf,4BAEA,yBAAKA,UAAU,WAAf,oCCCOG,MA5Ef,WAAqB,IAAD,ECFL,WACb,IAAMjC,EAAWC,cAQjB,MAAO,CACLwD,WAPiBvD,aAAY,SAACC,GAAD,OAAWA,EAAMsD,cAQ9CC,iBANuB,SAACC,GACxB,OAAO3D,EXmE2B,SAAC2D,GAAD,MAAW,CAC/C3E,KAAM,qBACN2E,QWrEkBC,CAAuBD,MDHFE,GAAhCJ,EADW,EACXA,WAAYC,EADD,EACCA,iBADD,EAEsC3D,IAAjDX,EAFW,EAEXA,aAAcyB,EAFH,EAEGA,kBAAmBc,EAFtB,EAEsBA,aAMxC,OAJAO,qBAAU,WACRrB,EAAkB,MAAO,OAAQ4C,KAChC,CAACA,IAGF,6BACE,6BACE,2BACE3B,UAAU,cACV9C,KAAK,OACL+B,MAAO0C,EACPK,SAAU,SAACC,GAAD,OAAOL,EAAiBK,EAAEC,cAAcjD,WAGtD,6BACG0C,EACC,6BACGrE,EAAa+C,SACZ,yBAAKL,UAAU,WAAf,8CACE1C,EAAagD,QACf,6BACE,wBAAIN,UAAU,YACX1C,EAAa8B,SAASmB,KAAI,SAAC/C,EAAUgD,GAAX,OACzB,wBAAIC,IAAKD,GACP,uBAAGP,KAAI,UAAKlD,EAAL,gBAAiB8C,EAAarC,EAASgC,MAC5C,wBAAIQ,UAAU,aAAaxC,EAASkD,OACpC,yBAAKV,UAAU,eAAexC,EAASmD,SACvC,yBAAKX,UAAU,gBAAf,uCACSxC,EAASoD,SAASC,MAE3B,4BACGrD,EAASsD,KAAKP,KAAI,SAACQ,EAAKP,GAAN,OACjB,wBAAIR,UAAU,UAAUS,IAAKD,GAC1BO,EAAIF,gBAQnB,6BACGvD,EAAa0D,aACZ,yBAAKhB,UAAU,WAAf,8CACE1C,EAAa2D,WAAa3D,EAAa8B,SAASC,OAClD,4BACEnC,KAAK,SACLgE,QAAS,kBACPnC,EAAkB,WAAY,OAAQ4C,KAH1C,wCASA,KAIJrE,EAAa6D,OACf,yBAAKnB,UAAU,WAAf,4BAEA,yBAAKA,UAAU,WAAf,mCAIJ,yBAAKA,UAAU,WAAf,qFE/DKmC,MARf,WACE,OACE,gCACE,4CbImB,oBcsCVC,MAhCf,WAAgB,IACP9D,EAAiBL,IAAjBK,cAOP,OALA8B,qBAAU,WACR9B,MAEC,IAGD,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,8BACE,yBAAK0B,UAAU,SAEb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,IAAIC,UAAWpC,IACjC,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,QAAQC,UAAWpC,IACrC,kBAAC,IAAD,CAAOkC,OAAK,EAACC,KAAK,aAAaC,UAAWnB,IAC1C,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,YAAYC,UAAWjB,IACzC,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,iBAAiBC,UAAWf,IAC9C,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,OAAOC,UAAWd,IACpC,kBAAC,IAAD,CAAOY,OAAK,EAACC,KAAK,YAAYC,UAAWb,IACzC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,UAAUC,UAAWC,MAG3C,kBAAC,EAAD,OAEF,kBAAC,EAAD,QChCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BClBAC,EAAe,CACnBnB,WAAY,GACZ1E,SAAU,GACVK,aAAc,GACdE,SAAU,GACVE,iBAAkB,GAClBE,aAAc,GACdE,YAAa,GACbE,QAAS,ICEX,IAAM+E,EAAQC,aDCC,WAAgD,IAA/B3E,EAA8B,uDAAtByE,EAAcG,EAAQ,uCAC5D,OAAQA,EAAO/F,MACb,IAAK,qBACH,OAAO,2BACFmB,GADL,IAEEsD,WAAYsB,EAAOpB,OAIvB,IAAK,kBACH,OAAO,2BACFxD,GADL,IAEEpB,SAAU,CAACoD,UAAU,KAGzB,IAAK,0BACH,OAAO,2BACFhC,GADL,IAEEpB,SAAS,2BACJgG,EAAOhG,UADJ,IAENqD,SAAS,MAIf,IAAK,yBACH,OAAO,2BACFjC,GADL,IAEEpB,SAAU,CAACkE,QAAQ,KAIvB,IAAK,uBACH,MAAsB,aAAlB8B,EAAO7F,OACF,2BACFiB,GADL,IAEEf,aAAa,2BACRe,EAAMf,cADC,IAEV0D,cAAc,MAIX,2BACF3C,GADL,IAEEf,aAAc,CAAC+C,UAAU,KAI/B,IAAK,+BACH,MAAsB,aAAlB4C,EAAO7F,OACF,2BACFiB,GADL,IAEEf,aAAa,2BACR2F,EAAO3F,cADA,IAEV8B,SAAS,GAAD,mBACHf,EAAMf,aAAa8B,UADhB,YAEH6D,EAAO3F,aAAa8B,WAEzBkB,SAAS,MAIN,2BACFjC,GADL,IAEEf,aAAa,2BACR2F,EAAO3F,cADA,IAEVgD,SAAS,MAKjB,IAAK,8BACH,OAAO,2BACFjC,GADL,IAEEf,aAAc,CAAC6D,QAAQ,EAAM+B,IAAKD,EAAOC,OAI7C,IAAK,kBACH,OAAO,2BACF7E,GADL,IAEEf,aAAc,CAAC+C,UAAU,KAG7B,IAAK,0BACH,OAAO,2BACFhC,GADL,IAEEb,SAAS,2BACJyF,EAAOzF,UADJ,IAEN8C,SAAS,MAIf,IAAK,yBACH,OAAO,2BACFjC,GADL,IAEEb,SAAU,CAAC2D,QAAQ,KAIvB,IAAK,2BACH,OAAO,2BACF9C,GADL,IAEEX,iBAAkB,CAAC2C,UAAU,KAGjC,IAAK,mCACH,OAAO,2BACFhC,GADL,IAEEX,iBAAiB,2BACZuF,EAAOvF,kBADI,IAEd4C,SAAS,MAIf,IAAK,kCACH,OAAO,2BACFjC,GADL,IAEEX,iBAAkB,CAACyD,QAAQ,KAI/B,IAAK,sBACH,OAAO,2BACF9C,GADL,IAEET,aAAc,CAACyC,UAAU,KAG7B,IAAK,8BACH,OAAO,2BACFhC,GADL,IAEET,aAAa,2BACRqF,EAAOrF,cADA,IAEV0C,SAAS,MAIf,IAAK,6BACH,OAAO,2BACFjC,GADL,IAEET,aAAc,CAACuD,QAAQ,KAI3B,IAAK,sBACH,OAAO,2BACF9C,GADL,IAEEP,YAAa,CAACuC,UAAU,KAG5B,IAAK,8BACH,OAAO,2BACFhC,GADL,IAEEP,YAAY,2BACPmF,EAAOnF,aADD,IAETwC,SAAS,MAIf,IAAK,6BACH,OAAO,2BACFjC,GADL,IAEEP,YAAa,CAACqD,QAAQ,KAI1B,IAAK,iBACH,OAAO,2BACF9C,GADL,IAEEL,QAAS,CAACqC,UAAU,KAGxB,IAAK,yBACH,OAAO,2BACFhC,GADL,IAEEL,QAAQ,2BACHiF,EAAOjF,SADL,IAELsC,SAAS,MAIf,IAAK,wBACH,OAAO,2BACFjC,GADL,IAEEL,QAAS,CAACmD,QAAQ,KAItB,QACE,OAAO9C,MC3Lb8E,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9E,MAAK,SAAA+E,GACJA,EAAaC,gBAEd7E,OAAM,SAAA8E,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4470861c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1813edc8.svg\";","// ブログサービスのAPIのURL\nexport const API_PATH = \"https://actionpterygii.microcms.io/api/v1/\";\n// ブログサービスのAPIのキー\nexport const API_KEY = \"3eb7bf23-beb0-472c-82af-0b67cdb6ca22\";\n// ブログサービスのルートのルートからのパス\nexport const PATH = \"/blog#/\";\n// ブログサービスのタイトル\nexport const TITLE = \"ブログタイトル\";\n// ブログサービスの説明\nexport const DESCRIPTION = \"ブログです\";\n// ブログサービスのコピーライト\nexport const COPYRIGHT = \"actionpterygii\";\n","export const fetchBlogInfoAction = () => ({\n  type: \"FETCH_BLOG_INFO\"\n});\nexport const successFetchBlogInfoAction = (blogInfo) => ({\n  type: \"SUCCESS_FETCH_BLOG_INFO\",\n  blogInfo\n});\nexport const failedFetchBlogInfoAction = () => ({\n  type: \"FAILED_FETCH_BLOG_INFO\"\n});\n\nexport const fetchBlogPostListAction = (status) => ({\n  type: \"FETCH_BLOG_POST_LIST\",\n  status\n});\nexport const successFetchBlogPostListAction = (blogPostList, status) => ({\n  type: \"SUCCESS_FETCH_BLOG_POST_LIST\",\n  blogPostList,\n  status\n});\nexport const failedFetchBlogPostListAction = () => ({\n  type: \"FAILED_FETCH_BLOG_POST_LIST\"\n});\n\nexport const fetchBlogPostAction = () => ({\n  type: \"FETCH_BLOG_POST\"\n});\nexport const successFetchBlogPostAction = (blogPost) => ({\n  type: \"SUCCESS_FETCH_BLOG_POST\",\n  blogPost\n});\nexport const failedFetchBlogPostAction = () => ({\n  type: \"FAILED_FETCH_BLOG_POST\"\n});\n\nexport const fetchBlogCategoryListAction = () => ({\n  type: \"FETCH_BLOG_CATEGORY_LIST\"\n});\nexport const successFetchBlogCategoryListAction = (blogCategoryList) => ({\n  type: \"SUCCESS_FETCH_BLOG_CATEGORY_LIST\",\n  blogCategoryList\n});\nexport const failedFetchBlogCategoryListAction = () => ({\n  type: \"FAILED_FETCH_BLOG_CATEGORY_LIST\"\n});\nexport const fetchBlogCategoryAction = () => ({\n  type: \"FETCH_BLOG_CATEGORY\"\n});\nexport const successFetchBlogCategoryAction = (blogCategory) => ({\n  type: \"SUCCESS_FETCH_BLOG_CATEGORY\",\n  blogCategory\n});\nexport const failedFetchBlogCategoryAction = () => ({\n  type: \"FAILED_FETCH_BLOG_CATEGORY\"\n});\n\nexport const fetchBlogTagListAction = () => ({\n  type: \"FETCH_BLOG_TAG_LIST\"\n});\nexport const successFetchBlogTagListAction = (blogTagList) => ({\n  type: \"SUCCESS_FETCH_BLOG_TAG_LIST\",\n  blogTagList\n});\nexport const failedFetchBlogTagListAction = () => ({\n  type: \"FAILED_FETCH_BLOG_TAG_LIST\"\n});\nexport const fetchBlogTagAction = () => ({\n  type: \"FETCH_BLOG_TAG\"\n});\nexport const successFetchBlogTagAction = (blogTag) => ({\n  type: \"SUCCESS_FETCH_BLOG_TAG\",\n  blogTag\n});\nexport const failedFetchBlogTagAction = () => ({\n  type: \"FAILED_FETCH_BLOG_TAG\"\n});\n\nexport const changeSearchTextAction = (text) => ({\n  type: \"CHANGE_SEARCH_TEXT\",\n  text\n});\n","import {useSelector, useDispatch} from \"react-redux\";\nimport axios from \"axios\";\n\nimport {API_PATH, API_KEY} from \"../config\";\nimport {\n  fetchBlogInfoAction,\n  successFetchBlogInfoAction,\n  failedFetchBlogInfoAction,\n  fetchBlogPostListAction,\n  successFetchBlogPostListAction,\n  failedFetchBlogPostListAction,\n  fetchBlogPostAction,\n  successFetchBlogPostAction,\n  failedFetchBlogPostAction,\n  fetchBlogCategoryListAction,\n  successFetchBlogCategoryListAction,\n  failedFetchBlogCategoryListAction,\n  fetchBlogCategoryAction,\n  successFetchBlogCategoryAction,\n  failedFetchBlogCategoryAction,\n  fetchBlogTagListAction,\n  successFetchBlogTagListAction,\n  failedFetchBlogTagListAction,\n  fetchBlogTagAction,\n  successFetchBlogTagAction,\n  failedFetchBlogTagAction\n} from \"./actions\";\n\nexport default function useAPI() {\n  const dispatch = useDispatch();\n\n  const blogInfo = useSelector((state) => state.blogInfo);\n  const blogPostList = useSelector((state) => state.blogPostList);\n  const blogPost = useSelector((state) => state.blogPost);\n  const blogCategoryList = useSelector((state) => state.blogCategoryList);\n  const blogCategory = useSelector((state) => state.blogCategory);\n  const blogTagList = useSelector((state) => state.blogTagList);\n  const blogTag = useSelector((state) => state.blogTag);\n\n  const fetchBlogInfo = async () => {\n    dispatch(fetchBlogInfoAction());\n    await axios\n      .get(API_PATH + \"information\", {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogInfoAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogInfoAction());\n      });\n  };\n\n  const fetchBlogPostList = async (\n    status = \"new\",\n    target = null,\n    value = null,\n    limit = \"10\"\n  ) => {\n    dispatch(fetchBlogPostListAction(status));\n    const offsetQuery = (() => {\n      if (status === \"continue\") {\n        return `&offset=${blogPostList.contents.length}`;\n      } else {\n        return \"\";\n      }\n    })();\n    const searchQuery = (() => {\n      if (target === \"post\") {\n        return `&q=${value}`;\n      } else if (target === \"category\") {\n        return `&filters=${target}[equals]${value}`;\n      } else if (target === \"tags\") {\n        return `&filters=${target}[contains]${value}`;\n      } else {\n        return \"\";\n      }\n    })();\n    await axios\n      .get(`${API_PATH}post?limit=${limit}${offsetQuery}${searchQuery}`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogPostListAction(res.data, status));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogPostListAction());\n      });\n  };\n\n  const fetchBlogPost = async (id) => {\n    dispatch(fetchBlogPostAction());\n    await axios\n      .get(`${API_PATH}post/post${id}`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogPostAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogPostAction());\n      });\n  };\n\n  const fetchBlogCategoryList = async () => {\n    dispatch(fetchBlogCategoryListAction());\n    await axios\n      .get(`${API_PATH}category?limit=99`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogCategoryListAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogCategoryListAction());\n      });\n  };\n\n  const fetchBlogCategory = async (id) => {\n    dispatch(fetchBlogCategoryAction());\n    await axios\n      .get(`${API_PATH}category/${id}`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogCategoryAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogCategoryAction());\n      });\n  };\n\n  const fetchBlogTagList = async () => {\n    dispatch(fetchBlogTagListAction());\n    await axios\n      .get(`${API_PATH}tag?limit=99`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogTagListAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogTagListAction());\n      });\n  };\n\n  const fetchBlogTag = async (id) => {\n    dispatch(fetchBlogTagAction());\n    await axios\n      .get(`${API_PATH}tag/${id}`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogTagAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogTagAction());\n      });\n  };\n\n  const postIdToPath = (id) => {\n    return id.replace(/post/g, \"\");\n  };\n\n  return {\n    blogInfo,\n    fetchBlogInfo,\n    blogPostList,\n    fetchBlogPostList,\n    blogPost,\n    fetchBlogPost,\n    blogCategoryList,\n    fetchBlogCategoryList,\n    blogCategory,\n    fetchBlogCategory,\n    blogTagList,\n    fetchBlogTagList,\n    blogTag,\n    fetchBlogTag,\n    postIdToPath\n  };\n}\n","import React from \"react\";\n\nimport {PATH, TITLE, DESCRIPTION} from \"../config\";\n\nfunction Header() {\n  return (\n    <header>\n      <div className=\"inner\">\n        <h1>\n          <a href={`${PATH}post`}>{TITLE}</a>\n        </h1>\n        <p>{DESCRIPTION}</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nimport {PATH} from \"../config\";\n\nfunction Menu() {\n  return (\n    <div>\n      <div>\n        <a href={`${PATH}post`}>記事一覧</a>\n      </div>\n      <div>\n        <a href={`${PATH}search`}>記事検索</a>\n      </div>\n      <div>\n        <a href={`${PATH}category`}>カテゴリ一覧</a>\n      </div>\n      <div>\n        <a href={`${PATH}tag`}>タグ一覧</a>\n      </div>\n    </div>\n  );\n}\n\nexport default Menu;\n","import React, {useEffect} from \"react\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction PostList() {\n  const {blogPostList, fetchBlogPostList, postIdToPath} = useAPI();\n\n  useEffect(() => {\n    fetchBlogPostList(\"new\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {blogPostList.fetching ? (\n        <div className=\"loading\">よみこみちゅう</div>\n      ) : blogPostList.success ? (\n        <div>\n          <h2>記事一覧</h2>\n          <ul className=\"postList\">\n            {blogPostList.contents.map((blogPost, i) => (\n              <li key={i}>\n                <a href={`${PATH}post/${postIdToPath(blogPost.id)}`}>\n                  <h3 className=\"postTitle\">{blogPost.title}</h3>\n                  <div className=\"postContent\">{blogPost.content}</div>\n                  <div className=\"postCategory\">\n                    カテゴリー：{blogPost.category.name}\n                  </div>\n                  <ul>\n                    {blogPost.tags.map((tag, i) => (\n                      <li className=\"postTag\" key={i}>\n                        {tag.name}\n                      </li>\n                    ))}\n                  </ul>\n                </a>\n              </li>\n            ))}\n          </ul>\n          <div>\n            {blogPostList.moreFetching ? (\n              <div className=\"loading\">よみこみちゅう</div>\n            ) : blogPostList.totalCount > blogPostList.contents.length ? (\n              <button\n                className=\"more\"\n                type=\"button\"\n                onClick={() => fetchBlogPostList(\"continue\")}\n              >\n                更に読み込む\n              </button>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      ) : blogPostList.failed ? (\n        <div className=\"nothing\">ないです</div>\n      ) : (\n        <div className=\"waiting\">待機中です</div>\n      )}\n    </div>\n  );\n}\n\nexport default PostList;\n","import React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Post() {\n  const {blogPost, fetchBlogPost} = useAPI();\n  const {key} = useParams();\n\n  useEffect(() => {\n    fetchBlogPost(key);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {blogPost.fetching ? (\n        <div className=\"loading\">よみこみちゅう</div>\n      ) : blogPost.success ? (\n        <div className=\"post\">\n          <h2 className=\"postTitle\">{blogPost.title}</h2>\n          <div className=\"postContent\">{blogPost.content}</div>\n          <div className=\"postCategory\">\n            <p>カテゴリー</p>\n            <a href={`${PATH}category/${blogPost.category.id}`}>\n              {blogPost.category.name}\n            </a>\n          </div>\n          <div className=\"postTaglist\">\n            <p>タグ</p>\n            <ul>\n              {blogPost.tags.map((tag, i) => (\n                <li className=\"postTag\" key={i}>\n                  <a href={`${PATH}tag/${tag.id}`}>{tag.name}</a>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      ) : blogPost.failed ? (\n        <div className=\"nothing\">ないです</div>\n      ) : (\n        <div className=\"waiting\">待機中です</div>\n      )}\n    </div>\n  );\n}\n\nexport default Post;\n","import React, {useEffect} from \"react\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction CategoryList() {\n  const {blogCategoryList, fetchBlogCategoryList} = useAPI();\n\n  useEffect(() => {\n    fetchBlogCategoryList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {blogCategoryList.fetching ? (\n        <div className=\"loading\">よみこみちゅう</div>\n      ) : blogCategoryList.success ? (\n        <div>\n          <h2>カテゴリー一覧</h2>\n          <ul className=\"categoryList\">\n            {blogCategoryList.contents.map((category, i) => (\n              <li key={i}>\n                <a href={`${PATH}category/${category.id}`}>\n                  <h3 className=\"categoryName\">{category.name}</h3>\n                  <div className=\"categoryDesc\">{category.desc}</div>\n                </a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : blogCategoryList.failed ? (\n        <div className=\"nothing\">ないです</div>\n      ) : (\n        <div className=\"waiting\">待機中です</div>\n      )}\n    </div>\n  );\n}\n\nexport default CategoryList;\n","import React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Category() {\n  const {\n    blogCategory,\n    fetchBlogCategory,\n    blogPostList,\n    fetchBlogPostList,\n    postIdToPath\n  } = useAPI();\n  const {key} = useParams();\n\n  useEffect(() => {\n    fetchBlogCategory(key);\n    fetchBlogPostList(\"new\", \"category\", key);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {blogCategory.fetching ? (\n        <div className=\"loading\">よみこみちゅう</div>\n      ) : blogCategory.success ? (\n        <div>\n          <h2>「{blogCategory.name}」カテゴリー</h2>\n          <div className=\"desc\">{blogCategory.desc}</div>\n          <div>\n            {blogPostList.fetching ? (\n              <div className=\"loading\">よみこみちゅう</div>\n            ) : blogPostList.success ? (\n              <div>\n                <h3>の記事一覧</h3>\n                <ul className=\"postList\">\n                  {blogPostList.contents.map((blogPost, i) => (\n                    <li key={i}>\n                      <a href={`${PATH}post/${postIdToPath(blogPost.id)}`}>\n                        <h4 className=\"postTitle\">{blogPost.title}</h4>\n                        <div className=\"postContent\">{blogPost.content}</div>\n                        <div className=\"postCategory\">\n                          カテゴリー：{blogPost.category.name}\n                        </div>\n                        <ul>\n                          {blogPost.tags.map((tag, i) => (\n                            <li className=\"postTag\" key={i}>\n                              {tag.name}\n                            </li>\n                          ))}\n                        </ul>\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n                <div>\n                  {blogPostList.moreFetching ? (\n                    <div className=\"loading\">よみこみちゅう</div>\n                  ) : blogPostList.totalCount > blogPostList.contents.length ? (\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        fetchBlogPostList(\"continue\", \"category\", key)\n                      }\n                    >\n                      更に読み込む\n                    </button>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </div>\n            ) : blogPostList.failed ? (\n              <div className=\"nothing\">ないです</div>\n            ) : (\n              <div className=\"waiting\">待機中です</div>\n            )}\n          </div>\n        </div>\n      ) : blogCategory.failed ? (\n        <div className=\"nothing\">ないです</div>\n      ) : (\n        <div className=\"waiting\">待機中です</div>\n      )}\n    </div>\n  );\n}\n\nexport default Category;\n","import React, {useEffect} from \"react\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction TagList() {\n  const {blogTagList, fetchBlogTagList} = useAPI();\n\n  useEffect(() => {\n    fetchBlogTagList();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {blogTagList.fetching ? (\n        <div className=\"loading\">よみこみちゅう</div>\n      ) : blogTagList.success ? (\n        <div>\n          <h2>タグ一覧</h2>\n          <ul className=\"tagList\">\n            {blogTagList.contents.map((category, i) => (\n              <li key={i}>\n                <a href={`${PATH}tag/${category.id}`}>\n                  <h3 className=\"tagName\">{category.name}</h3>\n                  <div className=\"tagDesc\">{category.desc}</div>\n                </a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : blogTagList.failed ? (\n        <div className=\"nothing\">ないです</div>\n      ) : (\n        <div className=\"waiting\">待機中です</div>\n      )}\n    </div>\n  );\n}\n\nexport default TagList;\n","import React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Tag() {\n  const {\n    blogTag,\n    fetchBlogTag,\n    blogPostList,\n    fetchBlogPostList,\n    postIdToPath\n  } = useAPI();\n  const {key} = useParams();\n\n  useEffect(() => {\n    fetchBlogTag(key);\n    fetchBlogPostList(\"new\", \"tags\", key);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <div>\n      {blogTag.fetching ? (\n        <div className=\"loading\">よみこみちゅう</div>\n      ) : blogTag.success ? (\n        <div>\n          <h2>「{blogTag.name}」タグ</h2>\n          <div className=\"desc\">{blogTag.desc}</div>\n          <div>\n            {blogPostList.fetching ? (\n              <div className=\"loading\">よみこみちゅう</div>\n            ) : blogPostList.success ? (\n              <div>\n                <h3>の記事一覧</h3>\n                <ul className=\"postList\">\n                  {blogPostList.contents.map((blogPost, i) => (\n                    <li key={i}>\n                      <a href={`${PATH}post/${postIdToPath(blogPost.id)}`}>\n                        <h4 className=\"postTitle\">{blogPost.title}</h4>\n                        <div className=\"postContent\">{blogPost.content}</div>\n                        <div className=\"postCategory\">\n                          カテゴリー：{blogPost.category.name}\n                        </div>\n                        <ul>\n                          {blogPost.tags.map((tag, i) => (\n                            <li className=\"postTag\" key={i}>\n                              {tag.name}\n                            </li>\n                          ))}\n                        </ul>\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n                <div>\n                  {blogPostList.moreFetching ? (\n                    <div className=\"loading\">よみこみちゅう</div>\n                  ) : blogPostList.totalCount > blogPostList.contents.length ? (\n                    <button\n                      type=\"button\"\n                      onClick={() => fetchBlogPostList(\"continue\", \"tags\", key)}\n                    >\n                      更に読み込む\n                    </button>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </div>\n            ) : blogPostList.failed ? (\n              <div className=\"nothing\">ないです</div>\n            ) : (\n              <div className=\"waiting\">待機中です</div>\n            )}\n          </div>\n        </div>\n      ) : blogTag.failed ? (\n        <div className=\"nothing\">ないです</div>\n      ) : (\n        <div className=\"waiting\">待機中です</div>\n      )}\n    </div>\n  );\n}\n\nexport default Tag;\n","import React, {useEffect} from \"react\";\n\nimport {PATH} from \"../config\";\nimport useCommonState from \"../scripts/useCommonState\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction PostList() {\n  const {searchText, changeSearchText} = useCommonState();\n  const {blogPostList, fetchBlogPostList, postIdToPath} = useAPI();\n\n  useEffect(() => {\n    fetchBlogPostList(\"new\", \"post\", searchText);\n  }, [searchText]);\n\n  return (\n    <div>\n      <div>\n        <input\n          className=\"searchInput\"\n          type=\"text\"\n          value={searchText}\n          onChange={(e) => changeSearchText(e.currentTarget.value)}\n        />\n      </div>\n      <div>\n        {searchText ? (\n          <div>\n            {blogPostList.fetching ? (\n              <div className=\"loading\">よみこみちゅう</div>\n            ) : blogPostList.success ? (\n              <div>\n                <ul className=\"postList\">\n                  {blogPostList.contents.map((blogPost, i) => (\n                    <li key={i}>\n                      <a href={`${PATH}post/${postIdToPath(blogPost.id)}`}>\n                        <h3 className=\"postTitle\">{blogPost.title}</h3>\n                        <div className=\"postContent\">{blogPost.content}</div>\n                        <div className=\"postCategory\">\n                          カテゴリー：{blogPost.category.name}\n                        </div>\n                        <ul>\n                          {blogPost.tags.map((tag, i) => (\n                            <li className=\"postTag\" key={i}>\n                              {tag.name}\n                            </li>\n                          ))}\n                        </ul>\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n                <div>\n                  {blogPostList.moreFetching ? (\n                    <div className=\"loading\">よみこみちゅう</div>\n                  ) : blogPostList.totalCount > blogPostList.contents.length ? (\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        fetchBlogPostList(\"continue\", \"post\", searchText)\n                      }\n                    >\n                      更に読み込む\n                    </button>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </div>\n            ) : blogPostList.failed ? (\n              <div className=\"nothing\">ないです</div>\n            ) : (\n              <div className=\"waiting\">待機中です</div>\n            )}\n          </div>\n        ) : (\n          <div className=\"noinput\">検索文字を入力してください</div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default PostList;\n","import {useSelector, useDispatch} from \"react-redux\";\n\nimport {changeSearchTextAction} from \"./actions\";\n\nexport default function useCommonState() {\n  const dispatch = useDispatch();\n\n  const searchText = useSelector((state) => state.searchText);\n\n  const changeSearchText = (text) => {\n    return dispatch(changeSearchTextAction(text));\n  };\n\n  return {\n    searchText,\n    changeSearchText\n  };\n}\n","import React from \"react\";\n\nimport {COPYRIGHT} from \"../config\";\n\nfunction Footer() {\n  return (\n    <footer>\n      <small>&copy; 2020 {COPYRIGHT}</small>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, {useEffect} from \"react\";\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./App.scss\";\n\nimport useAPI from \"./scripts/useAPI\";\nimport Header from \"./components/Header\";\nimport Menu from \"./components/Menu\";\nimport PostList from \"./components/PostList\";\nimport Post from \"./components/Post\";\nimport CategoryList from \"./components/CategoryList\";\nimport Category from \"./components/Category\";\nimport TagList from \"./components/TagList\";\nimport Tag from \"./components/Tag\";\nimport Search from \"./components/Search\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const {fetchBlogInfo} = useAPI();\n\n  useEffect(() => {\n    fetchBlogInfo();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return (\n    <HashRouter>\n      <Header />\n      <main>\n        <div className=\"inner\">\n          {/* <img src={logo} className=\"App-logo\" alt=\"logo\" /> */}\n          <Switch>\n            <Route exact path=\"/\" component={PostList} />\n            <Route exact path=\"/post\" component={PostList} />\n            <Route exact path=\"/post/:key\" component={Post} />\n            <Route exact path=\"/category\" component={CategoryList} />\n            <Route exact path=\"/category/:key\" component={Category} />\n            <Route exact path=\"/tag\" component={TagList} />\n            <Route exact path=\"/tag/:key\" component={Tag} />\n            <Route exact path=\"/search\" component={Search} />\n          </Switch>\n        </div>\n        <Menu />\n      </main>\n      <Footer />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  searchText: \"\",\n  blogInfo: {},\n  blogPostList: {},\n  blogPost: {},\n  blogCategoryList: {},\n  blogCategory: {},\n  blogTagList: {},\n  blogTag: {}\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"CHANGE_SEARCH_TEXT\": {\n      return {\n        ...state,\n        searchText: action.text\n      };\n    }\n\n    case \"FETCH_BLOG_INFO\": {\n      return {\n        ...state,\n        blogInfo: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_INFO\": {\n      return {\n        ...state,\n        blogInfo: {\n          ...action.blogInfo,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_INFO\": {\n      return {\n        ...state,\n        blogInfo: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_POST_LIST\": {\n      if (action.status === \"continue\") {\n        return {\n          ...state,\n          blogPostList: {\n            ...state.blogPostList,\n            moreFetching: true\n          }\n        };\n      } else {\n        return {\n          ...state,\n          blogPostList: {fetching: true}\n        };\n      }\n    }\n    case \"SUCCESS_FETCH_BLOG_POST_LIST\": {\n      if (action.status === \"continue\") {\n        return {\n          ...state,\n          blogPostList: {\n            ...action.blogPostList,\n            contents: [\n              ...state.blogPostList.contents,\n              ...action.blogPostList.contents\n            ],\n            success: true\n          }\n        };\n      } else {\n        return {\n          ...state,\n          blogPostList: {\n            ...action.blogPostList,\n            success: true\n          }\n        };\n      }\n    }\n    case \"FAILED_FETCH_BLOG_POST_LIST\": {\n      return {\n        ...state,\n        blogPostList: {failed: true, err: action.err}\n      };\n    }\n\n    case \"FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPostList: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPost: {\n          ...action.blogPost,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPost: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_CATEGORY_LIST\": {\n      return {\n        ...state,\n        blogCategoryList: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_CATEGORY_LIST\": {\n      return {\n        ...state,\n        blogCategoryList: {\n          ...action.blogCategoryList,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_CATEGORY_LIST\": {\n      return {\n        ...state,\n        blogCategoryList: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_CATEGORY\": {\n      return {\n        ...state,\n        blogCategory: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_CATEGORY\": {\n      return {\n        ...state,\n        blogCategory: {\n          ...action.blogCategory,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_CATEGORY\": {\n      return {\n        ...state,\n        blogCategory: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_TAG_LIST\": {\n      return {\n        ...state,\n        blogTagList: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_TAG_LIST\": {\n      return {\n        ...state,\n        blogTagList: {\n          ...action.blogTagList,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_TAG_LIST\": {\n      return {\n        ...state,\n        blogTagList: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_TAG\": {\n      return {\n        ...state,\n        blogTag: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_TAG\": {\n      return {\n        ...state,\n        blogTag: {\n          ...action.blogTag,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_TAG\": {\n      return {\n        ...state,\n        blogTag: {failed: true}\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\n\nimport reducer from \"./scripts/reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}