{"version":3,"sources":["logo.svg","config.js","scripts/actions.js","scripts/useAPI.js","components/Header.js","components/Top.js","components/PostList.js","components/Post.js","components/Category.js","components/Footer.js","App.js","serviceWorker.js","scripts/reducer.js","index.js"],"names":["module","exports","PATH","KEY","fetchBlogPostListAction","status","type","successFetchBlogPostListAction","blogPostList","successFetchBlogPostAction","blogPost","successFetchBlogCategoryAction","blogCategory","useAPI","dispatch","useDispatch","blogInfo","useSelector","state","fetchBlogInfo","axios","get","headers","then","res","payload","data","fetchBlogPostList","a","target","value","limit","offsetQuery","contents","length","searchQuery","catch","fetchBlogPost","id","fetchBlogCategory","postIdToPath","replace","Header","title","description","Top","PostList","useEffect","console","log","fetching","success","map","i","key","href","content","category","name","tags","tag","moreFetching","totalCount","onClick","failed","Post","useParams","Category","desc","Footer","copyright","App","src","logo","className","alt","exact","path","component","Boolean","window","location","hostname","match","initialState","store","createStore","action","err","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"gFAAAA,EAAOC,QAAU,IAA0B,kC,2PCC9BC,EAAO,6CAEPC,EAAM,uCCENC,EAA0B,SAACC,GAAD,MAAa,CAClDC,KAAM,uBACND,WAEWE,EAAiC,SAACC,EAAcH,GAAf,MAA2B,CACvEC,KAAM,+BACNE,eACAH,WASWI,EAA6B,SAACC,GAAD,MAAe,CACvDJ,KAAM,0BACNI,aASWC,EAAiC,SAACC,GAAD,MAAmB,CAC/DN,KAAM,8BACNM,iBCjBa,SAASC,IACtB,IAAMC,EAAWC,cAEXC,EAAWC,aAAY,SAACC,GAAD,OAAWA,EAAMF,YACxCR,EAAeS,aAAY,SAACC,GAAD,OAAWA,EAAMV,gBAC5CE,EAAWO,aAAY,SAACC,GAAD,OAAWA,EAAMR,YACxCE,EAAeK,aAAY,SAACC,GAAD,OAAWA,EAAMN,gBAiFlD,MAAO,CACLI,WACAG,cAjFoB,WACpBC,IACGC,IAAInB,EAAO,cAAe,CACzBoB,QAAS,CAAC,YAAanB,KAExBoB,MAAK,SAACC,GACLV,ED/ByC,CAC/CR,KAAM,kBACNmB,QC6BmCD,EAAIE,WA4ErClB,eACAmB,kBAzEqB,uCAAG,kDAAAC,EAAA,6DACxBvB,EADwB,+BACf,MACTwB,EAFwB,+BAEf,KACTC,EAHwB,+BAGhB,KACRC,EAJwB,+BAIhB,KAERjB,EAASV,EAAwBC,IAC3B2B,EACW,aAAX3B,EACI,WAAN,OAAkBG,EAAayB,SAASC,QAEjC,GAGLC,EACW,QAAXN,EACI,MAAN,OAAaC,GACO,aAAXD,EACH,YAAN,OAAmBA,EAAnB,mBAAoCC,GAChB,SAAXD,EACH,YAAN,OAAmBA,EAAnB,qBAAsCC,GAE/B,GAtBa,SAyBlBV,IACHC,IADG,UACInB,EADJ,sBACsB6B,GADtB,OAC8BC,GAD9B,OAC4CG,GAAe,CAC7Db,QAAS,CAAC,YAAanB,KAExBoB,MAAK,SAACC,GACLV,EAASP,EAA+BiB,EAAIE,KAAMrB,OAEnD+B,OAAM,WACLtB,EDtD4C,CAClDR,KAAM,mCCoBoB,2CAAH,qDA0ErBI,WACA2B,cAtCiB,uCAAG,WAAOC,GAAP,SAAAV,EAAA,6DACpBd,EDvDsC,CACxCR,KAAM,oBCqDgB,SAEdc,IACHC,IAAInB,EAAO,YAAcoC,EAAI,CAC5BhB,QAAS,CAAC,YAAanB,KAExBoB,MAAK,SAACC,GACLV,EAASL,EAA2Be,EAAIE,UAEzCU,OAAM,WACLtB,EDzDwC,CAC9CR,KAAM,8BC8CgB,2CAAH,sDAuCjBM,eACA2B,kBA1BqB,uCAAG,WAAOD,GAAP,SAAAV,EAAA,6DACxBd,ED1D0C,CAC5CR,KAAM,wBCwDoB,SAElBc,IACHC,IAAInB,EAAO,YAAcoC,EAAI,CAC5BhB,QAAS,CAAC,YAAanB,KAExBoB,MAAK,SAACC,GACLV,EAASH,EAA+Ba,EAAIE,UAE7CU,OAAM,WACLtB,ED5D4C,CAClDR,KAAM,kCCiDoB,2CAAH,sDA2BrBkC,aAbmB,SAACF,GACpB,OAAOA,EAAGG,QAAQ,QAAS,MCtFhBC,MAXf,WAAmB,IACV1B,EAAYH,IAAZG,SAEP,OACE,gCACE,4BAAKA,EAAS2B,OACd,2BAAI3B,EAAS4B,eCAJC,MANf,WAGE,OAFmBhC,IAAZG,SAEA,oDCqDM8B,MAxDf,WAAqB,IAAD,EACsCjC,IAAjDL,EADW,EACXA,aAAcmB,EADH,EACGA,kBAAmBa,EADtB,EACsBA,aAQxC,OANAO,qBAAU,WACRpB,EAAkB,SACjB,IAEHqB,QAAQC,IAAIzC,GAERA,EAAa0C,SACR,2EAEH1C,EAAa2C,QAEb,6BACE,wDACA,4BACG3C,EAAayB,SAASmB,KAAI,SAAC1C,EAAU2C,GAAX,OACzB,wBAAIC,IAAKD,GACP,uBAAGE,KAAI,kBAAaf,EAAa9B,EAAS4B,MACxC,4BAAK5B,EAASiC,OACd,6BAAMjC,EAAS8C,SACf,6BAAM9C,EAAS+C,SAASC,MACxB,4BACGhD,EAASiD,KAAKP,KAAI,SAACQ,EAAKP,GAAN,OACjB,wBAAIC,IAAKD,GAAIO,EAAIF,gBAO7B,6BACGlD,EAAaqD,aACZ,+DACErD,EAAasD,WAAatD,EAAayB,SAASC,OAClD,4BACE5B,KAAK,SACLyD,QAAS,kBAAMpC,EAAkB,cAFnC,wCAOA,KAKCnB,EAAawD,OACf,yDAEA,gHCZEC,MAtCf,WAAiB,IAAD,EACoBpD,IAA3BH,EADO,EACPA,SAAU2B,EADH,EACGA,cACViB,EAAOY,cAAPZ,IAMP,OAJAP,qBAAU,WACRV,EAAciB,KACb,IAEC5C,EAASwC,SACJ,2EAEHxC,EAASyC,QAET,6BACE,4BAAKzC,EAASiC,OACd,6BAAMjC,EAAS8C,SACf,6BACE,uBAAGD,KAAI,sBAAiB7C,EAAS+C,SAASnB,KACvC5B,EAAS+C,SAASC,OAGvB,4BACGhD,EAASiD,KAAKP,KAAI,SAACQ,EAAKP,GAAN,OACjB,wBAAIC,IAAKD,GACP,uBAAGE,KAAI,iBAAYK,EAAItB,KAAOsB,EAAIF,YAMnChD,EAASsD,OACX,yDAEA,gHCPEG,MA1Bf,WAAqB,IAAD,EACwBtD,IAAnCD,EADW,EACXA,aAAc2B,EADH,EACGA,kBACde,EAAOY,cAAPZ,IAMP,OAJAP,qBAAU,WACRR,EAAkBe,KACjB,IAEC1C,EAAasC,SACR,uFAEHtC,EAAauC,QAEb,6BACE,4BAAKvC,EAAa8C,MAClB,6BAAM9C,EAAawD,OAGdxD,EAAaoD,OACf,yDAEA,sHCZEK,MAVf,WAAmB,IACVrD,EAAYH,IAAZG,SAEP,OACE,gCACE,4CAAoBA,EAASsD,aC4BpBC,MAxBf,WAAgB,IACPpD,EAAiBN,IAAjBM,cAMP,OAJA4B,qBAAU,WACR5B,MACC,IAGD,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,8BACE,yBAAKqD,IAAKC,IAAMC,UAAU,WAAWC,IAAI,SACzC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWjC,IACjC,kBAAC,IAAD,CAAO+B,OAAK,EAACC,KAAK,QAAQC,UAAWhC,IACrC,kBAAC,IAAD,CAAO8B,OAAK,EAACC,KAAK,aAAaC,UAAWb,IAC1C,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,iBAAiBC,UAAWX,MAGlD,kBAAC,EAAD,QCpBcY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2BClBAC,EAAe,CACnBpE,SAAU,GACVR,aAAc,GACdE,SAAU,GACVE,aAAc,ICMhB,IAAMyE,EAAQC,aDHC,WAAgD,IAA/BpE,EAA8B,uDAAtBkE,EAAcG,EAAQ,uCAC5D,OAAQA,EAAOjF,MACb,IAAK,kBACH,OAAO,2BACFY,GADL,IAEEF,SAAUuE,EAAO9D,UAIrB,IAAK,uBACH,MAAsB,aAAlB8D,EAAOlF,OACF,2BACFa,GADL,IAEEV,aAAa,2BACRU,EAAMV,cADC,IAEVqD,cAAc,MAIX,2BACF3C,GADL,IAEEV,aAAc,CAAC0C,UAAU,KAI/B,IAAK,+BAEH,OADAF,QAAQC,IAAI/B,GACU,aAAlBqE,EAAOlF,OACF,2BACFa,GADL,IAEEV,aAAa,2BACR+E,EAAO/E,cADA,IAEVyB,SAAS,GAAD,mBACHf,EAAMV,aAAayB,UADhB,YAEHsD,EAAO/E,aAAayB,WAEzBkB,SAAS,MAIN,2BACFjC,GADL,IAEEV,aAAa,2BACR+E,EAAO/E,cADA,IAEV2C,SAAS,MAKjB,IAAK,8BACH,OAAO,2BACFjC,GADL,IAEEV,aAAc,CAACwD,QAAQ,EAAMwB,IAAKD,EAAOC,OAI7C,IAAK,kBACH,OAAO,2BACFtE,GADL,IAEEV,aAAc,CAAC0C,UAAU,KAG7B,IAAK,0BACH,OAAO,2BACFhC,GADL,IAEER,SAAS,2BACJ6E,EAAO7E,UADJ,IAENyC,SAAS,MAIf,IAAK,yBACH,OAAO,2BACFjC,GADL,IAEER,SAAU,CAACsD,QAAQ,KAIvB,IAAK,sBACH,OAAO,2BACF9C,GADL,IAEEN,aAAc,CAACsC,UAAU,KAG7B,IAAK,8BACH,OAAO,2BACFhC,GADL,IAEEN,aAAa,2BACR2E,EAAO3E,cADA,IAEVuC,SAAS,MAIf,IAAK,6BACH,OAAO,2BACFjC,GADL,IAEEN,aAAc,CAACoD,QAAQ,KAI3B,QACE,OAAO9C,MChGbuE,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SFmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxE,MAAK,SAAAyE,GACJA,EAAaC,gBAEd7D,OAAM,SAAA8D,GACLlD,QAAQkD,MAAMA,EAAMC,c","file":"static/js/main.355ca50c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1813edc8.svg\";","// ブログサービスのAPIのURL\nexport const PATH = 'https://actionpterygii.microcms.io/api/v1/';\n// ブログサービスのAPIのキー\nexport const KEY = '3eb7bf23-beb0-472c-82af-0b67cdb6ca22';","export const fetchBlogInfoAction = (payload) => ({\n  type: \"FETCH_BLOG_INFO\",\n  payload\n});\n\nexport const fetchBlogPostListAction = (status) => ({\n  type: \"FETCH_BLOG_POST_LIST\",\n  status\n});\nexport const successFetchBlogPostListAction = (blogPostList, status) => ({\n  type: \"SUCCESS_FETCH_BLOG_POST_LIST\",\n  blogPostList,\n  status\n});\nexport const failedFetchBlogPostListAction = () => ({\n  type: \"FAILED_FETCH_BLOG_POST_LIST\"\n});\n\nexport const fetchBlogPostAction = () => ({\n  type: \"FETCH_BLOG_POST\"\n});\nexport const successFetchBlogPostAction = (blogPost) => ({\n  type: \"SUCCESS_FETCH_BLOG_POST\",\n  blogPost\n});\nexport const failedFetchBlogPostAction = () => ({\n  type: \"FAILED_FETCH_BLOG_POST\"\n});\n\nexport const fetchBlogCategoryAction = () => ({\n  type: \"FETCH_BLOG_CATEGORY\"\n});\nexport const successFetchBlogCategoryAction = (blogCategory) => ({\n  type: \"SUCCESS_FETCH_BLOG_CATEGORY\",\n  blogCategory\n});\nexport const failedFetchBlogCategoryAction = () => ({\n  type: \"FAILED_FETCH_BLOG_CATEGORY\"\n});\n","import {useSelector, useDispatch} from \"react-redux\";\nimport axios from \"axios\";\n\nimport {PATH, KEY} from \"../config\";\nimport {\n  fetchBlogInfoAction,\n  fetchBlogPostListAction,\n  successFetchBlogPostListAction,\n  failedFetchBlogPostListAction,\n  fetchBlogPostAction,\n  successFetchBlogPostAction,\n  failedFetchBlogPostAction,\n  fetchBlogCategoryAction,\n  successFetchBlogCategoryAction,\n  failedFetchBlogCategoryAction\n} from \"./actions\";\n\nexport default function useAPI() {\n  const dispatch = useDispatch();\n\n  const blogInfo = useSelector((state) => state.blogInfo);\n  const blogPostList = useSelector((state) => state.blogPostList);\n  const blogPost = useSelector((state) => state.blogPost);\n  const blogCategory = useSelector((state) => state.blogCategory);\n\n  const fetchBlogInfo = () => {\n    axios\n      .get(PATH + \"information\", {\n        headers: {\"X-API-KEY\": KEY}\n      })\n      .then((res) => {\n        dispatch(fetchBlogInfoAction(res.data));\n      });\n  };\n\n  const fetchBlogPostList = async (\n    status = \"new\",\n    target = null,\n    value = null,\n    limit = \"10\"\n  ) => {\n    dispatch(fetchBlogPostListAction(status));\n    const offsetQuery = (() => {\n      if (status === \"continue\") {\n        return `&offset=${blogPostList.contents.length}`;\n      } else {\n        return \"\";\n      }\n    })();\n    const searchQuery = (() => {\n      if (target === \"all\") {\n        return `&q=${value}`;\n      } else if (target === \"category\") {\n        return `&filters=${target}[equals]${value}`;\n      } else if (target === \"tags\") {\n        return `&filters=${target}[contains]${value}`;\n      } else {\n        return \"\";\n      }\n    })();\n    await axios\n      .get(`${PATH}post?limit=${limit}${offsetQuery}${searchQuery}`, {\n        headers: {\"X-API-KEY\": KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogPostListAction(res.data, status));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogPostListAction());\n      });\n  };\n\n  const fetchBlogPost = async (id) => {\n    dispatch(fetchBlogPostAction());\n    await axios\n      .get(PATH + \"post/post\" + id, {\n        headers: {\"X-API-KEY\": KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogPostAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogPostAction());\n      });\n  };\n\n  const fetchBlogCategory = async (id) => {\n    dispatch(fetchBlogCategoryAction());\n    await axios\n      .get(PATH + \"category/\" + id, {\n        headers: {\"X-API-KEY\": KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogCategoryAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogCategoryAction());\n      });\n  };\n\n  const postIdToPath = (id) => {\n    return id.replace(/post/g, \"\");\n  };\n\n  return {\n    blogInfo,\n    fetchBlogInfo,\n    blogPostList,\n    fetchBlogPostList,\n    blogPost,\n    fetchBlogPost,\n    blogCategory,\n    fetchBlogCategory,\n    postIdToPath\n  };\n}\n","import React from \"react\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Header() {\n  const {blogInfo} = useAPI();\n\n  return (\n    <header>\n      <h1>{blogInfo.title}</h1>\n      <p>{blogInfo.description}</p>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Top() {\n  const {blogInfo} = useAPI();\n\n  return <div>とっぷ</div>;\n}\n\nexport default Top;\n","import React, {useEffect} from \"react\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction PostList() {\n  const {blogPostList, fetchBlogPostList, postIdToPath} = useAPI();\n\n  useEffect(() => {\n    fetchBlogPostList(\"new\");\n  }, []);\n\n  console.log(blogPostList);\n\n  if (blogPostList.fetching) {\n    return <div>よみこみちゅう</div>;\n  } else {\n    if (blogPostList.success) {\n      return (\n        <div>\n          <h2>記事一覧</h2>\n          <ul>\n            {blogPostList.contents.map((blogPost, i) => (\n              <li key={i}>\n                <a href={`/#/post/${postIdToPath(blogPost.id)}`}>\n                  <h3>{blogPost.title}</h3>\n                  <div>{blogPost.content}</div>\n                  <div>{blogPost.category.name}</div>\n                  <ul>\n                    {blogPost.tags.map((tag, i) => (\n                      <li key={i}>{tag.name}</li>\n                    ))}\n                  </ul>\n                </a>\n              </li>\n            ))}\n          </ul>\n          <div>\n            {blogPostList.moreFetching ? (\n              <div>読み込み中</div>\n            ) : blogPostList.totalCount > blogPostList.contents.length ? (\n              <button\n                type=\"button\"\n                onClick={() => fetchBlogPostList(\"continue\")}\n              >\n                更に読み込む\n              </button>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      );\n    } else if (blogPostList.failed) {\n      return <div>ないです</div>;\n    } else {\n      return <div>なにか普通じゃない状態です</div>;\n    }\n  }\n}\n\nexport default PostList;\n","import React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Post() {\n  const {blogPost, fetchBlogPost} = useAPI();\n  const {key} = useParams();\n\n  useEffect(() => {\n    fetchBlogPost(key);\n  }, []);\n\n  if (blogPost.fetching) {\n    return <div>よみこみちゅう</div>;\n  } else {\n    if (blogPost.success) {\n      return (\n        <div>\n          <h2>{blogPost.title}</h2>\n          <div>{blogPost.content}</div>\n          <div>\n            <a href={`/#/category/${blogPost.category.id}`}>\n              {blogPost.category.name}\n            </a>\n          </div>\n          <ul>\n            {blogPost.tags.map((tag, i) => (\n              <li key={i}>\n                <a href={`/#/tag/${tag.id}`}>{tag.name}</a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    } else if (blogPost.failed) {\n      return <div>ないです</div>;\n    } else {\n      return <div>なにか普通じゃない状態です</div>;\n    }\n  }\n}\n\nexport default Post;\n","import React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Category() {\n  const {blogCategory, fetchBlogCategory} = useAPI();\n  const {key} = useParams();\n\n  useEffect(() => {\n    fetchBlogCategory(key);\n  }, []);\n\n  if (blogCategory.fetching) {\n    return <div>よみこみちゅうです</div>;\n  } else {\n    if (blogCategory.success) {\n      return (\n        <div>\n          <h2>{blogCategory.name}</h2>\n          <div>{blogCategory.desc}</div>\n        </div>\n      );\n    } else if (blogCategory.failed) {\n      return <div>ないです</div>;\n    } else {\n      return <div>なにか普通じゃない状態です。</div>;\n    }\n  }\n}\n\nexport default Category;\n","import React from \"react\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Footer() {\n  const {blogInfo} = useAPI();\n\n  return (\n    <footer>\n      <small>&copy; 2020 {blogInfo.copyright}</small>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, {useEffect} from \"react\";\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport useAPI from \"./scripts/useAPI\";\nimport Header from \"./components/Header\";\nimport Top from \"./components/Top\";\nimport PostList from \"./components/PostList\";\nimport Post from \"./components/Post\";\nimport Category from \"./components/Category\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const {fetchBlogInfo} = useAPI();\n\n  useEffect(() => {\n    fetchBlogInfo();\n  }, []);\n\n  return (\n    <HashRouter>\n      <Header />\n      <main>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Switch>\n          <Route exact path=\"/\" component={Top} />\n          <Route exact path=\"/post\" component={PostList} />\n          <Route exact path=\"/post/:key\" component={Post} />\n          <Route exact path=\"/category/:key\" component={Category} />\n        </Switch>\n      </main>\n      <Footer />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  blogInfo: {},\n  blogPostList: {},\n  blogPost: {},\n  blogCategory: {}\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"FETCH_BLOG_INFO\": {\n      return {\n        ...state,\n        blogInfo: action.payload\n      };\n    }\n\n    case \"FETCH_BLOG_POST_LIST\": {\n      if (action.status === \"continue\") {\n        return {\n          ...state,\n          blogPostList: {\n            ...state.blogPostList,\n            moreFetching: true\n          }\n        };\n      } else {\n        return {\n          ...state,\n          blogPostList: {fetching: true}\n        };\n      }\n    }\n    case \"SUCCESS_FETCH_BLOG_POST_LIST\": {\n      console.log(state);\n      if (action.status === \"continue\") {\n        return {\n          ...state,\n          blogPostList: {\n            ...action.blogPostList,\n            contents: [\n              ...state.blogPostList.contents,\n              ...action.blogPostList.contents\n            ],\n            success: true\n          }\n        };\n      } else {\n        return {\n          ...state,\n          blogPostList: {\n            ...action.blogPostList,\n            success: true\n          }\n        };\n      }\n    }\n    case \"FAILED_FETCH_BLOG_POST_LIST\": {\n      return {\n        ...state,\n        blogPostList: {failed: true, err: action.err}\n      };\n    }\n\n    case \"FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPostList: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPost: {\n          ...action.blogPost,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPost: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_CATEGORY\": {\n      return {\n        ...state,\n        blogCategory: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_CATEGORY\": {\n      return {\n        ...state,\n        blogCategory: {\n          ...action.blogCategory,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_CATEGORY\": {\n      return {\n        ...state,\n        blogCategory: {failed: true}\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\n\nimport reducer from \"./scripts/reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}