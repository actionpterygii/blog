{"version":3,"sources":["logo.svg","config.js","scripts/actions.js","scripts/useAPI.js","components/Header.js","components/Top.js","components/PostList.js","components/Post.js","components/CategoryList.js","components/Category.js","components/TagList.js","components/Tag.js","components/Footer.js","App.js","serviceWorker.js","scripts/reducer.js","index.js"],"names":["module","exports","API_PATH","API_KEY","PATH","fetchBlogPostListAction","status","type","successFetchBlogPostListAction","blogPostList","successFetchBlogPostAction","blogPost","successFetchBlogCategoryListAction","blogCategoryList","successFetchBlogCategoryAction","blogCategory","successFetchBlogTagListAction","blogTagList","successFetchBlogTagAction","blogTag","useAPI","dispatch","useDispatch","blogInfo","useSelector","state","fetchBlogInfo","axios","get","headers","then","res","payload","data","fetchBlogPostList","a","target","value","limit","offsetQuery","contents","length","searchQuery","catch","fetchBlogPost","id","fetchBlogCategoryList","fetchBlogCategory","fetchBlogTagList","fetchBlogTag","postIdToPath","replace","Header","title","description","Top","href","PostList","useEffect","fetching","success","map","i","key","content","category","name","tags","tag","moreFetching","totalCount","onClick","failed","Post","useParams","CategoryList","desc","Category","TagList","Tag","Footer","copyright","App","src","logo","className","alt","exact","path","component","Boolean","window","location","hostname","match","initialState","store","createStore","action","console","log","err","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.a5df8cb9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1813edc8.svg\";","// ブログサービスのAPIのURL\nexport const API_PATH = \"https://actionpterygii.microcms.io/api/v1/\";\n// ブログサービスのAPIのキー\nexport const API_KEY = \"3eb7bf23-beb0-472c-82af-0b67cdb6ca22\";\n// ブログサービスのルートのルートからのパス\nexport const PATH = \"/blog#/\";\n","export const fetchBlogInfoAction = (payload) => ({\n  type: \"FETCH_BLOG_INFO\",\n  payload\n});\n\nexport const fetchBlogPostListAction = (status) => ({\n  type: \"FETCH_BLOG_POST_LIST\",\n  status\n});\nexport const successFetchBlogPostListAction = (blogPostList, status) => ({\n  type: \"SUCCESS_FETCH_BLOG_POST_LIST\",\n  blogPostList,\n  status\n});\nexport const failedFetchBlogPostListAction = () => ({\n  type: \"FAILED_FETCH_BLOG_POST_LIST\"\n});\n\nexport const fetchBlogPostAction = () => ({\n  type: \"FETCH_BLOG_POST\"\n});\nexport const successFetchBlogPostAction = (blogPost) => ({\n  type: \"SUCCESS_FETCH_BLOG_POST\",\n  blogPost\n});\nexport const failedFetchBlogPostAction = () => ({\n  type: \"FAILED_FETCH_BLOG_POST\"\n});\n\nexport const fetchBlogCategoryListAction = () => ({\n  type: \"FETCH_BLOG_CATEGORY_LIST\"\n});\nexport const successFetchBlogCategoryListAction = (blogCategoryList) => ({\n  type: \"SUCCESS_FETCH_BLOG_CATEGORY_LIST\",\n  blogCategoryList\n});\nexport const failedFetchBlogCategoryListAction = () => ({\n  type: \"FAILED_FETCH_BLOG_CATEGORY_LIST\"\n});\nexport const fetchBlogCategoryAction = () => ({\n  type: \"FETCH_BLOG_CATEGORY\"\n});\nexport const successFetchBlogCategoryAction = (blogCategory) => ({\n  type: \"SUCCESS_FETCH_BLOG_CATEGORY\",\n  blogCategory\n});\nexport const failedFetchBlogCategoryAction = () => ({\n  type: \"FAILED_FETCH_BLOG_CATEGORY\"\n});\n\nexport const fetchBlogTagListAction = () => ({\n  type: \"FETCH_BLOG_TAG_LIST\"\n});\nexport const successFetchBlogTagListAction = (blogTagList) => ({\n  type: \"SUCCESS_FETCH_BLOG_TAG_LIST\",\n  blogTagList\n});\nexport const failedFetchBlogTagListAction = () => ({\n  type: \"FAILED_FETCH_BLOG_TAG_LIST\"\n});\nexport const fetchBlogTagAction = () => ({\n  type: \"FETCH_BLOG_TAG\"\n});\nexport const successFetchBlogTagAction = (blogTag) => ({\n  type: \"SUCCESS_FETCH_BLOG_TAG\",\n  blogTag\n});\nexport const failedFetchBlogTagAction = () => ({\n  type: \"FAILED_FETCH_BLOG_TAG\"\n});\n","import {useSelector, useDispatch} from \"react-redux\";\nimport axios from \"axios\";\n\nimport {API_PATH, API_KEY} from \"../config\";\nimport {\n  fetchBlogInfoAction,\n  fetchBlogPostListAction,\n  successFetchBlogPostListAction,\n  failedFetchBlogPostListAction,\n  fetchBlogPostAction,\n  successFetchBlogPostAction,\n  failedFetchBlogPostAction,\n  fetchBlogCategoryListAction,\n  successFetchBlogCategoryListAction,\n  failedFetchBlogCategoryListAction,\n  fetchBlogCategoryAction,\n  successFetchBlogCategoryAction,\n  failedFetchBlogCategoryAction,\n  fetchBlogTagListAction,\n  successFetchBlogTagListAction,\n  failedFetchBlogTagListAction,\n  fetchBlogTagAction,\n  successFetchBlogTagAction,\n  failedFetchBlogTagAction\n} from \"./actions\";\n\nexport default function useAPI() {\n  const dispatch = useDispatch();\n\n  const blogInfo = useSelector((state) => state.blogInfo);\n  const blogPostList = useSelector((state) => state.blogPostList);\n  const blogPost = useSelector((state) => state.blogPost);\n  const blogCategoryList = useSelector((state) => state.blogCategoryList);\n  const blogCategory = useSelector((state) => state.blogCategory);\n  const blogTagList = useSelector((state) => state.blogTagList);\n  const blogTag = useSelector((state) => state.blogTag);\n\n  const fetchBlogInfo = () => {\n    axios\n      .get(API_PATH + \"information\", {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(fetchBlogInfoAction(res.data));\n      });\n  };\n\n  const fetchBlogPostList = async (\n    status = \"new\",\n    target = null,\n    value = null,\n    limit = \"10\"\n  ) => {\n    dispatch(fetchBlogPostListAction(status));\n    const offsetQuery = (() => {\n      if (status === \"continue\") {\n        return `&offset=${blogPostList.contents.length}`;\n      } else {\n        return \"\";\n      }\n    })();\n    const searchQuery = (() => {\n      if (target === \"all\") {\n        return `&q=${value}`;\n      } else if (target === \"category\") {\n        return `&filters=${target}[equals]${value}`;\n      } else if (target === \"tags\") {\n        return `&filters=${target}[contains]${value}`;\n      } else {\n        return \"\";\n      }\n    })();\n    await axios\n      .get(`${API_PATH}post?limit=${limit}${offsetQuery}${searchQuery}`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogPostListAction(res.data, status));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogPostListAction());\n      });\n  };\n\n  const fetchBlogPost = async (id) => {\n    dispatch(fetchBlogPostAction());\n    await axios\n      .get(`${API_PATH}post/post${id}`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogPostAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogPostAction());\n      });\n  };\n\n  const fetchBlogCategoryList = async () => {\n    dispatch(fetchBlogCategoryListAction());\n    await axios\n      .get(`${API_PATH}category?limit=99`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogCategoryListAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogCategoryListAction());\n      });\n  };\n\n  const fetchBlogCategory = async (id) => {\n    dispatch(fetchBlogCategoryAction());\n    await axios\n      .get(`${API_PATH}category/${id}`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogCategoryAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogCategoryAction());\n      });\n  };\n\n  const fetchBlogTagList = async () => {\n    dispatch(fetchBlogTagListAction());\n    await axios\n      .get(`${API_PATH}tag?limit=99`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogTagListAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogTagListAction());\n      });\n  };\n\n  const fetchBlogTag = async (id) => {\n    dispatch(fetchBlogTagAction());\n    await axios\n      .get(`${API_PATH}tag/${id}`, {\n        headers: {\"X-API-KEY\": API_KEY}\n      })\n      .then((res) => {\n        dispatch(successFetchBlogTagAction(res.data));\n      })\n      .catch(() => {\n        dispatch(failedFetchBlogTagAction());\n      });\n  };\n\n  const postIdToPath = (id) => {\n    return id.replace(/post/g, \"\");\n  };\n\n  return {\n    blogInfo,\n    fetchBlogInfo,\n    blogPostList,\n    fetchBlogPostList,\n    blogPost,\n    fetchBlogPost,\n    blogCategoryList,\n    fetchBlogCategoryList,\n    blogCategory,\n    fetchBlogCategory,\n    blogTagList,\n    fetchBlogTagList,\n    blogTag,\n    fetchBlogTag,\n    postIdToPath\n  };\n}\n","import React from \"react\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Header() {\n  const {blogInfo} = useAPI();\n\n  return (\n    <header>\n      <h1>{blogInfo.title}</h1>\n      <p>{blogInfo.description}</p>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nimport {PATH} from \"../config\";\n\nfunction Top() {\n  return (\n    <div>\n      <h2>とっぷ</h2>\n      <div>\n        <a href={`${PATH}post`}>記事一覧</a>\n      </div>\n      <div>\n        <a href={`${PATH}category`}>カテゴリ一覧</a>\n      </div>\n      <div>\n        <a href={`${PATH}tag`}>タグ一覧</a>\n      </div>\n    </div>\n  );\n}\n\nexport default Top;\n","import React, {useEffect} from \"react\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction PostList() {\n  const {blogPostList, fetchBlogPostList, postIdToPath} = useAPI();\n\n  useEffect(() => {\n    fetchBlogPostList(\"new\");\n  }, []);\n\n  return (\n    <div>\n      {blogPostList.fetching ? (\n        <div>よみこみちゅう</div>\n      ) : blogPostList.success ? (\n        <div>\n          <h2>記事一覧</h2>\n          <ul>\n            {blogPostList.contents.map((blogPost, i) => (\n              <li key={i}>\n                <a href={`${PATH}post/${postIdToPath(blogPost.id)}`}>\n                  <h3>{blogPost.title}</h3>\n                  <div>{blogPost.content}</div>\n                  <div>{blogPost.category.name}</div>\n                  <ul>\n                    {blogPost.tags.map((tag, i) => (\n                      <li key={i}>{tag.name}</li>\n                    ))}\n                  </ul>\n                </a>\n              </li>\n            ))}\n          </ul>\n          <div>\n            {blogPostList.moreFetching ? (\n              <div>読み込み中</div>\n            ) : blogPostList.totalCount > blogPostList.contents.length ? (\n              <button\n                type=\"button\"\n                onClick={() => fetchBlogPostList(\"continue\")}\n              >\n                更に読み込む\n              </button>\n            ) : (\n              \"\"\n            )}\n          </div>\n        </div>\n      ) : blogPostList.failed ? (\n        <div>ないです</div>\n      ) : (\n        <div>なにか普通じゃない状態です</div>\n      )}\n    </div>\n  );\n}\n\nexport default PostList;\n","import React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Post() {\n  const {blogPost, fetchBlogPost} = useAPI();\n  const {key} = useParams();\n\n  useEffect(() => {\n    fetchBlogPost(key);\n  }, []);\n\n  if (blogPost.fetching) {\n    return <div>よみこみちゅう</div>;\n  } else {\n    if (blogPost.success) {\n      return (\n        <div>\n          <h2>{blogPost.title}</h2>\n          <div>{blogPost.content}</div>\n          <div>\n            <a href={`${PATH}category/${blogPost.category.id}`}>\n              {blogPost.category.name}\n            </a>\n          </div>\n          <ul>\n            {blogPost.tags.map((tag, i) => (\n              <li key={i}>\n                <a href={`${PATH}tag/${tag.id}`}>{tag.name}</a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    } else if (blogPost.failed) {\n      return <div>ないです</div>;\n    } else {\n      return <div>なにか普通じゃない状態です</div>;\n    }\n  }\n}\n\nexport default Post;\n","import React, {useEffect} from \"react\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction CategoryList() {\n  const {blogCategoryList, fetchBlogCategoryList} = useAPI();\n\n  useEffect(() => {\n    fetchBlogCategoryList(\"new\");\n  }, []);\n\n  return (\n    <div>\n      {blogCategoryList.fetching ? (\n        <div>よみこみちゅう</div>\n      ) : blogCategoryList.success ? (\n        <div>\n          <h2>カテゴリ一覧</h2>\n          <ul>\n            {blogCategoryList.contents.map((category, i) => (\n              <li key={i}>\n                <a href={`${PATH}category/${category.id}`}>\n                  <h3>{category.name}</h3>\n                  <div>{category.desc}</div>\n                </a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : blogCategoryList.failed ? (\n        <div>ないです</div>\n      ) : (\n        <div>なにか普通じゃない状態です</div>\n      )}\n    </div>\n  );\n}\n\nexport default CategoryList;\n","import React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Category() {\n  const {\n    blogCategory,\n    fetchBlogCategory,\n    blogPostList,\n    fetchBlogPostList,\n    postIdToPath\n  } = useAPI();\n  const {key} = useParams();\n\n  useEffect(() => {\n    fetchBlogCategory(key);\n    fetchBlogPostList(\"new\", \"category\", key);\n  }, []);\n\n  return (\n    <div>\n      {blogCategory.fetching ? (\n        <div>よみこみちゅうです</div>\n      ) : blogCategory.success ? (\n        <div>\n          <h2>{blogCategory.name}</h2>\n          <div>{blogCategory.desc}</div>\n          <div>\n            {blogPostList.fetching ? (\n              <div>よみこみちゅう</div>\n            ) : blogPostList.success ? (\n              <div>\n                <h3>記事一覧</h3>\n                <ul>\n                  {blogPostList.contents.map((blogPost, i) => (\n                    <li key={i}>\n                      <a href={`${PATH}post/${postIdToPath(blogPost.id)}`}>\n                        <h4>{blogPost.title}</h4>\n                        <div>{blogPost.content}</div>\n                        <div>{blogPost.category.name}</div>\n                        <ul>\n                          {blogPost.tags.map((tag, i) => (\n                            <li key={i}>{tag.name}</li>\n                          ))}\n                        </ul>\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n                <div>\n                  {blogPostList.moreFetching ? (\n                    <div>読み込み中</div>\n                  ) : blogPostList.totalCount > blogPostList.contents.length ? (\n                    <button\n                      type=\"button\"\n                      onClick={() =>\n                        fetchBlogPostList(\"continue\", \"category\", key)\n                      }\n                    >\n                      更に読み込む\n                    </button>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </div>\n            ) : blogPostList.failed ? (\n              <div>ないです</div>\n            ) : (\n              <div>なにか普通じゃない状態です</div>\n            )}\n          </div>\n        </div>\n      ) : blogCategory.failed ? (\n        <div>ないです</div>\n      ) : (\n        <div>なにか普通じゃない状態です。</div>\n      )}\n    </div>\n  );\n}\n\nexport default Category;\n","import React, {useEffect} from \"react\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction TagList() {\n  const {blogTagList, fetchBlogTagList} = useAPI();\n\n  useEffect(() => {\n    fetchBlogTagList(\"new\");\n  }, []);\n\n  return (\n    <div>\n      {blogTagList.fetching ? (\n        <div>よみこみちゅう</div>\n      ) : blogTagList.success ? (\n        <div>\n          <h2>タグ覧</h2>\n          <ul>\n            {blogTagList.contents.map((category, i) => (\n              <li key={i}>\n                <a href={`${PATH}tag/${category.id}`}>\n                  <h3>{category.name}</h3>\n                  <div>{category.desc}</div>\n                </a>\n              </li>\n            ))}\n          </ul>\n        </div>\n      ) : blogTagList.failed ? (\n        <div>ないです</div>\n      ) : (\n        <div>なにか普通じゃない状態です</div>\n      )}\n    </div>\n  );\n}\n\nexport default TagList;\n","import React, {useEffect} from \"react\";\nimport {useParams} from \"react-router-dom\";\n\nimport {PATH} from \"../config\";\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Tag() {\n  const {\n    blogTag,\n    fetchBlogTag,\n    blogPostList,\n    fetchBlogPostList,\n    postIdToPath\n  } = useAPI();\n  const {key} = useParams();\n\n  useEffect(() => {\n    fetchBlogTag(key);\n    fetchBlogPostList(\"new\", \"tags\", key);\n  }, []);\n\n  return (\n    <div>\n      {blogTag.fetching ? (\n        <div>よみこみちゅうです</div>\n      ) : blogTag.success ? (\n        <div>\n          <h2>{blogTag.name}</h2>\n          <div>{blogTag.desc}</div>\n          <div>\n            {blogPostList.fetching ? (\n              <div>よみこみちゅう</div>\n            ) : blogPostList.success ? (\n              <div>\n                <h3>記事一覧</h3>\n                <ul>\n                  {blogPostList.contents.map((blogPost, i) => (\n                    <li key={i}>\n                      <a href={`${PATH}post/${postIdToPath(blogPost.id)}`}>\n                        <h4>{blogPost.title}</h4>\n                        <div>{blogPost.content}</div>\n                        <div>{blogPost.category.name}</div>\n                        <ul>\n                          {blogPost.tags.map((tag, i) => (\n                            <li key={i}>{tag.name}</li>\n                          ))}\n                        </ul>\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n                <div>\n                  {blogPostList.moreFetching ? (\n                    <div>読み込み中</div>\n                  ) : blogPostList.totalCount > blogPostList.contents.length ? (\n                    <button\n                      type=\"button\"\n                      onClick={() => fetchBlogPostList(\"continue\", \"tags\", key)}\n                    >\n                      更に読み込む\n                    </button>\n                  ) : (\n                    \"\"\n                  )}\n                </div>\n              </div>\n            ) : blogPostList.failed ? (\n              <div>ないです</div>\n            ) : (\n              <div>なにか普通じゃない状態です</div>\n            )}\n          </div>\n        </div>\n      ) : blogTag.failed ? (\n        <div>ないです</div>\n      ) : (\n        <div>なにか普通じゃない状態です。</div>\n      )}\n    </div>\n  );\n}\n\nexport default Tag;\n","import React from \"react\";\n\nimport useAPI from \"../scripts/useAPI\";\n\nfunction Footer() {\n  const {blogInfo} = useAPI();\n\n  return (\n    <footer>\n      <small>&copy; 2020 {blogInfo.copyright}</small>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, {useEffect} from \"react\";\nimport {HashRouter, Switch, Route} from \"react-router-dom\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport useAPI from \"./scripts/useAPI\";\nimport Header from \"./components/Header\";\nimport Top from \"./components/Top\";\nimport PostList from \"./components/PostList\";\nimport Post from \"./components/Post\";\nimport CategoryList from \"./components/CategoryList\";\nimport Category from \"./components/Category\";\nimport TagList from \"./components/TagList\";\nimport Tag from \"./components/Tag\";\nimport Footer from \"./components/Footer\";\n\nfunction App() {\n  const {fetchBlogInfo} = useAPI();\n\n  useEffect(() => {\n    fetchBlogInfo();\n  }, []);\n\n  return (\n    <HashRouter>\n      <Header />\n      <main>\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Switch>\n          <Route exact path=\"/\" component={Top} />\n          <Route exact path=\"/post\" component={PostList} />\n          <Route exact path=\"/post/:key\" component={Post} />\n          <Route exact path=\"/category\" component={CategoryList} />\n          <Route exact path=\"/category/:key\" component={Category} />\n          <Route exact path=\"/tag\" component={TagList} />\n          <Route exact path=\"/tag/:key\" component={Tag} />\n        </Switch>\n      </main>\n      <Footer />\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  blogInfo: {},\n  blogPostList: {},\n  blogPost: {},\n  blogCategoryList: {},\n  blogCategory: {},\n  blogTagList: {},\n  blogTag: {}\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case \"FETCH_BLOG_INFO\": {\n      return {\n        ...state,\n        blogInfo: action.payload\n      };\n    }\n\n    case \"FETCH_BLOG_POST_LIST\": {\n      if (action.status === \"continue\") {\n        return {\n          ...state,\n          blogPostList: {\n            ...state.blogPostList,\n            moreFetching: true\n          }\n        };\n      } else {\n        return {\n          ...state,\n          blogPostList: {fetching: true}\n        };\n      }\n    }\n    case \"SUCCESS_FETCH_BLOG_POST_LIST\": {\n      console.log(state);\n      if (action.status === \"continue\") {\n        return {\n          ...state,\n          blogPostList: {\n            ...action.blogPostList,\n            contents: [\n              ...state.blogPostList.contents,\n              ...action.blogPostList.contents\n            ],\n            success: true\n          }\n        };\n      } else {\n        return {\n          ...state,\n          blogPostList: {\n            ...action.blogPostList,\n            success: true\n          }\n        };\n      }\n    }\n    case \"FAILED_FETCH_BLOG_POST_LIST\": {\n      return {\n        ...state,\n        blogPostList: {failed: true, err: action.err}\n      };\n    }\n\n    case \"FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPostList: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPost: {\n          ...action.blogPost,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_POST\": {\n      return {\n        ...state,\n        blogPost: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_CATEGORY_LIST\": {\n      return {\n        ...state,\n        blogCategoryList: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_CATEGORY_LIST\": {\n      return {\n        ...state,\n        blogCategoryList: {\n          ...action.blogCategoryList,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_CATEGORY_LIST\": {\n      return {\n        ...state,\n        blogCategoryList: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_CATEGORY\": {\n      return {\n        ...state,\n        blogCategory: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_CATEGORY\": {\n      return {\n        ...state,\n        blogCategory: {\n          ...action.blogCategory,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_CATEGORY\": {\n      return {\n        ...state,\n        blogCategory: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_TAG_LIST\": {\n      return {\n        ...state,\n        blogTagList: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_TAG_LIST\": {\n      return {\n        ...state,\n        blogTagList: {\n          ...action.blogTagList,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_TAG_LIST\": {\n      return {\n        ...state,\n        blogTagList: {failed: true}\n      };\n    }\n\n    case \"FETCH_BLOG_TAG\": {\n      return {\n        ...state,\n        blogTag: {fetching: true}\n      };\n    }\n    case \"SUCCESS_FETCH_BLOG_TAG\": {\n      return {\n        ...state,\n        blogTag: {\n          ...action.blogTag,\n          success: true\n        }\n      };\n    }\n    case \"FAILED_FETCH_BLOG_TAG\": {\n      return {\n        ...state,\n        blogTag: {failed: true}\n      };\n    }\n\n    default: {\n      return state;\n    }\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\n\nimport reducer from \"./scripts/reducer\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}